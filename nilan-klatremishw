substitutions:
  name: nilan-controller
  device_description: "Controller for Nilan"
  entity_prefix: nilan  

esphome:
  name: ${name}
  on_boot: 
    - priority: 600
      then: 
      - output.turn_on: pin16_high
      - output.turn_on: pin17_high
      - output.turn_on: pin19_high

esp32:
  board: esp32dev

output:
  - platform: gpio
    pin: 16
    id: pin16_high
  - platform: gpio
    pin: 17
    id: pin17_high
  - platform: gpio
    pin: 19
    id: pin19_high 

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:

web_server:

logger:
  level: DEBUG

api:

uart:
  id: mod_bus
  rx_pin: 21
  tx_pin: 22
  baud_rate: 19200
  stop_bits: 1

modbus:
  id: modbus0

modbus_controller:
  - id: nilan_modbus_controller
    address: 0x1
    modbus_id: modbus0
    setup_priority: -10
    update_interval: 15sec

select:
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Week program select"
    id: nilan_week_program_select
    address: 500
    force_new_range: true
    use_write_multiple: true
    value_type: U_WORD
    optionsmap:
      "None" : 0
      "Program 1" : 1
      "Program 2" : 2
      "Program 3" : 3
      "Erase" : 4

binary_sensor:
#########################
#### INPUT REGISTERS ####
#########################
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "User function"
    id: nilan_user_function
    register_type: read
    address: 100
    bitmask: 1

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Smoke alarm"
    id: nilan_smoke_alarm
    register_type: read
    address: 103
    bitmask: 1

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "High pressure switch"
    id: nilan_high_pressure
    register_type: read
    address: 107
    bitmask: 1

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Summer mode"
    id: nilan_is_summer
    register_type: read
    address: 1200
    bitmask: 1

###########################
#### HOLDING REGISTERS ####
###########################
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "User function active"
    id: nilan_user_function_active
    register_type: holding
    address: 123

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Defrost function active"
    id: nilan_defrost_function_active
    register_type: holding
    address: 125

sensor:
#########################
#### INPUT REGISTERS ####
#########################
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Bus version"
    id: nilan_bus_version
    skip_updates: 60
    internal: true
    accuracy_decimals: 0
    entity_category: diagnostic
    register_type: read
    address: 0


  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "External room temperature"
    id: nilan_extern_temp_t10
    unit_of_measurement: 째C
    accuracy_decimals: 1
    device_class: temperature
    value_type: S_WORD
    register_type: read
    address: 210
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "CO2"
    id: nilan_co2_level
    unit_of_measurement: "ppm"
    icon: "mdi:molecule-co2"
    accuracy_decimals: 0
    register_type: read
    address: 222
    on_value: 
      - lambda: !lambda |-
          id(aqi_co2).publish_state( (x < 400) ? "Excellent" : 
                                      (x < 1000) ? "Fine" : 
                                      (x < 1500) ? "Moderate" :
                                      (x < 2000) ? "Poor" :
                                      (x < 5000) ? "Very Poor" :
                                      "Severe");

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Active alarms"
    id: nilan_active_alarms
    accuracy_decimals: 0
    register_type: read
    address: 400

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Alarm list 1 id"
    id: nilan_alarm_list_1_id
    accuracy_decimals: 0
    register_type: read
    address: 401

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    internal: true
    id: nilan_alarm_list_1_date
    accuracy_decimals: 0
    register_type: read
    address: 402
    
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    internal: true
    id: nilan_alarm_list_1_time
    accuracy_decimals: 0
    register_type: read
    address: 403
    
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Alarm list 2 id"
    id: nilan_alarm_list_2_id
    accuracy_decimals: 0
    register_type: read
    address: 404

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    internal: true
    id: nilan_alarm_list_2_date
    accuracy_decimals: 0
    register_type: read
    address: 405
    
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    internal: true
    id: nilan_alarm_list_2_time
    accuracy_decimals: 0
    register_type: read
    address: 406

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Alarm list 3 id"
    id: nilan_alarm_list_3_id
    accuracy_decimals: 0
    register_type: read
    address: 407

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    internal: true
    id: nilan_alarm_list_3_date
    accuracy_decimals: 0
    register_type: read
    address: 408
    
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    internal: true
    id: nilan_alarm_list_3_time
    accuracy_decimals: 0
    register_type: read
    address: 409

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Actual on/off state"
    id: nilan_actual_on_off_state
    accuracy_decimals: 0
    register_type: read
    address: 1000

  #- platform: modbus_controller
  #  modbus_controller_id: nilan_modbus_controller
  #  name: "Seconds in state"
  #  id: nilan_seconds_in_state
  #  accuracy_decimals: 0
  #  register_type: read
  #  address: 1003

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Inlet temperature request"
    id: nilan_inlet_temp_set
    unit_of_measurement: 째C
    accuracy_decimals: 1
    device_class: temperature
    value_type: S_WORD
    register_type: read
    address: 1201
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Actual value for controlled temperature"
    id: nilan_temp_control
    unit_of_measurement: 째C
    accuracy_decimals: 1
    device_class: temperature
    value_type: S_WORD
    register_type: read
    address: 1202
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Actual room temperature"
    id: nilan_actual_room_temp
    unit_of_measurement: 째C
    accuracy_decimals: 1
    device_class: temperature
    value_type: S_WORD
    register_type: read
    address: 1203
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Requested capacity"
    id: nilan_requested_capacity
    unit_of_measurement: '%'
    accuracy_decimals: 0
    register_type: read
    address: 1205
    filters:
      - multiply: 0.01
      
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Actual capacity"
    id: nilan_actual_capacity
    unit_of_measurement: '%'
    accuracy_decimals: 0
    register_type: read
    address: 1206
    filters:
      - multiply: 0.01

number:
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "User time set (minutes)"
    id: nilan_user_time_set
    value_type: U_WORD
    min_value: 1.0
    max_value: 480.0
    lambda: !lambda |-
      uint16_t hours = x/100; // 100 is 1 hour
      uint16_t minutes = ((uint16_t)x) % 100;
      return (hours*60) + minutes;
    write_lambda: !lambda |-
      uint16_t intVal = x;
      uint16_t firstDigit = (intVal / 60); // 1 hour is written as '100' and not '60'
      uint16_t lastDigits = (intVal % 60); // 1:30 hours is written as '130' and not '90'
      uint16_t result = (firstDigit*100) + lastDigits;
      payload = modbus_controller::float_to_payload(result, modbus_controller::SensorValueType::U_WORD);
      return x;
    step: 1.0
    address: 602
    force_new_range: true
    use_write_multiple: true
  
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "User ventilation speed set"
    id: nilan_user_ventilation_speed_set
    min_value: 0.0
    max_value: 4.0
    step: 1.0
    address: 603
    force_new_range: true
    use_write_multiple: true
  
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "User temperature set (Extend only)"
    id: nilan_user_extend_temperature_set
    min_value: 15.0
    max_value: 30.0
    step: 1.0
    address: 604
    force_new_range: true
    use_write_multiple: true

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "User temperature set (Offset only)"
    id: nilan_user_offset_temperature_set
    min_value: 15.0
    max_value: 30.0
    step: 1.0
    address: 605
    force_new_range: true
    use_write_multiple: true

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Humidity low vent step"
    id: humidity_low_vent_step
    min_value: 0.0
    max_value: 4.0
    step: 1.0
    address: 1910
    force_new_range: true
    use_write_multiple: true
    
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Humidity high vent step"
    id: humidity_high_vent_step
    min_value: 0.0
    max_value: 4.0
    step: 1.0
    address: 1911
    force_new_range: true
    use_write_multiple: true 

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Humidity limit low vent"
    id: humidity_limit_low_vent    
    unit_of_measurement: '%'
    icon: "mdi:percent"
    min_value: 15.0
    max_value: 45.0
    step: 1.0
    address: 1912
    force_new_range: true
    use_write_multiple: true
    multiply: 100

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Humidity max time on high ventilation (minutes)"
    id: humidity_max_time_high_vent
    value_type: U_WORD
    unit_of_measurement: minutes
    min_value: 0.0
    max_value: 180.0
    step: 1.0
    address: 1913
    force_new_range: true
    use_write_multiple: true
    icon: mdi:clock-start

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "CO2 high vent step"
    id: co2_high_vent_step
    min_value: 0.0
    max_value: 4.0
    step: 1.0
    address: 1920
    force_new_range: true
    use_write_multiple: true

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "CO2 limit normal ventilation"
    id: co2_limit_normal_ventilation
    min_value: 400
    max_value: 750
    step: 1.0
    address: 1921
    force_new_range: true
    use_write_multiple: true
    mode: slider

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "CO2 limit high ventilation"
    id: co2_limit_high_ventilation
    min_value: 650
    max_value: 800
    step: 1.0
    address: 1922
    force_new_range: true
    use_write_multiple: true

text_sensor:
  - platform: template
    name: "Air Quality Index CO2 (AQI)"
    id: aqi_co2
    icon: mdi:air-filter    
  - platform: template
    name: "Alarm 1 timestamp"
    id: nilan_alarm_list_1_datetime
    lambda: |-
      uint16_t alarmDate = id(nilan_alarm_list_1_date).state;
      uint16_t alarmTime = id(nilan_alarm_list_1_time).state;
      
      if(!alarmDate ||!alarmTime) return std::string("");
      
      // Parse the date
      auto year = (alarmDate >> 9) + 1980;
      auto month = (alarmDate >> 5) & 0b00001111;
      auto day = alarmDate & 0b00011111;
      auto hour = (alarmTime >> 11) & 0b00011111;
      auto minute = (alarmTime >> 5) & 0b0011111;
      auto second = (alarmTime & 0b00011111) * 2;
      
      return std::to_string(year) + "-" +
        ((month < 10) ? "0" : "") + std::to_string(month) + "-" + 
        ((day < 10) ? "0" : "") + std::to_string(day) + " " +
        ((hour < 10) ? "0" : "") + std::to_string(hour) + ":" +
        ((minute < 10) ? "0" : "") + std::to_string(minute) + ":" +
        ((second < 10) ? "0" : "") + std::to_string(second);
  - platform: template
    name: "Alarm 2 timestamp"
    id: nilan_alarm_list_2_datetime
    lambda: |-
      uint16_t alarmDate = id(nilan_alarm_list_2_date).state;
      uint16_t alarmTime = id(nilan_alarm_list_2_time).state;
      
      if(!alarmDate ||!alarmTime) return std::string("");
      
      // Parse the date
      auto year = (alarmDate >> 9) + 1980;
      auto month = (alarmDate >> 5) & 0b00001111;
      auto day = alarmDate & 0b00011111;
      auto hour = (alarmTime >> 11) & 0b00011111;
      auto minute = (alarmTime >> 5) & 0b0011111;
      auto second = (alarmTime & 0b00011111) * 2;
      
      return std::to_string(year) + "-" +
        ((month < 10) ? "0" : "") + std::to_string(month) + "-" + 
        ((day < 10) ? "0" : "") + std::to_string(day) + " " +
        ((hour < 10) ? "0" : "") + std::to_string(hour) + ":" +
        ((minute < 10) ? "0" : "") + std::to_string(minute) + ":" +
        ((second < 10) ? "0" : "") + std::to_string(second);
  - platform: template
    name: "Alarm 3 timestamp"
    id: nilan_alarm_list_3_datetime
    lambda: |-
      uint16_t alarmDate = id(nilan_alarm_list_3_date).state;
      uint16_t alarmTime = id(nilan_alarm_list_3_time).state;
      
      if(!alarmDate ||!alarmTime) return std::string("");
      
      // Parse the date
      auto year = (alarmDate >> 9) + 1980;
      auto month = (alarmDate >> 5) & 0b00001111;
      auto day = alarmDate & 0b00011111;
      auto hour = (alarmTime >> 11) & 0b00011111;
      auto minute = (alarmTime >> 5) & 0b0011111;
      auto second = (alarmTime & 0b00011111) * 2;
      
      return std::to_string(year) + "-" +
        ((month < 10) ? "0" : "") + std::to_string(month) + "-" + 
        ((day < 10) ? "0" : "") + std::to_string(day) + " " +
        ((hour < 10) ? "0" : "") + std::to_string(hour) + ":" +
        ((minute < 10) ? "0" : "") + std::to_string(minute) + ":" +
        ((second < 10) ? "0" : "") + std::to_string(second);
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Software version"
    id: nilan_version_info
    skip_updates: 60
    register_type: read
    register_count: 3
    response_size: 6
    address: 1
    entity_category: diagnostic
    lambda: !lambda |-
      float bus_version = nilan_bus_version->get_state();
      std::string output;
      
      if (bus_version == 8) {
        output = data[item->offset+1];
        output += data[item->offset+0];
        output += data[item->offset+3];
        output += data[item->offset+2];
        output += data[item->offset+5]; 
        output += data[item->offset+4];
      } else {  
        output = data[item->offset+0];
        output += data[item->offset+1];
        output += '.';
        output += data[item->offset+2];
        output += data[item->offset+3];
        output += '.';
        output += data[item->offset+4];
        output += data[item->offset+5];
      }
 
      ESP_LOGD("main","Parsed SW version: %s", output.c_str()); 
      return output;

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Actual user function"
    id: nilan_actual_user_function
    register_type: holding
    address: 600
    lambda: !lambda |-
      uint16_t int_user_function = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed user function int : %d", int_user_function);
      std::string actual_user_function;
      switch(int_user_function) {
        case 0: actual_user_function = "0 : None"; break;
        case 1: actual_user_function = "1 : Extend"; break;
        case 2: actual_user_function = "2 : Inlet"; break;
        case 3: actual_user_function = "3 : Exhaust"; break;
        case 4: actual_user_function = "4 : External heater offset"; break;
        case 5: actual_user_function = "5 : Ventilate"; break;
        case 6: actual_user_function = "6 : Cooker Hood"; break;
        default: actual_user_function = ""; break;
      }
      return actual_user_function;

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Aggregate type"
    id: nilan_platform_id
    entity_category: diagnostic
    skip_updates: 60
    register_type: holding
    address: 1000
    lambda: !lambda |-
      uint16_t int_type = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed aggregate type int : %d", int_type);
      std::string type_str;
      switch (int_type) {
        case 0: type_str = "None"; break;
        case 1: type_str = "Test"; break;
        case 2: type_str = "VPL 10 uden k첩l"; break;
        case 3: type_str = "VPL 15 uden k첩l"; break;
        case 4: type_str = "VPL 15 med k첩l"; break;
        case 5: type_str = "VPL 25 med 3 hastigheder uden k첩l"; break;
        case 6: type_str = "VPL 25 med 3 hastigheder med k첩l"; break;
        case 7: type_str = "VPL 28 2 hastigheder uden k첩l"; break;
        case 8: type_str = "VPL 28 med 2 hastigheder med k첩l"; break;
        case 9: type_str = "VP 18 med kryds monteret oven p책 anl챈g uden k첩l"; break;
        case 10: type_str = "VP 18 med kryds monteret oven p책 anl챈g med k첩l"; break;
        case 11: type_str = "Vp 18 Compact og Compact p uden k첩l"; break;
        case 12: type_str = "VP 18 Compact og Compact P med k첩l"; break;
        case 13: type_str = "Comfort anl챈g (Comfort 300 LR)"; break;
        case 14: type_str = "CT 150 anl챈g med 1-2-3 omskifter"; break;
        case 15: type_str = "VLX som k첩rer VAV"; break;
        case 16: type_str = "VLX med 2 trin"; break;
        case 17: type_str = "VLX med 3 trin"; break;
        case 18: type_str = "VP 18 uden k첩l"; break;
        case 19: type_str = "VP 18 med k첩l"; break;
        case 20: type_str = "VP 18 med elkedel uden k첩l"; break;
        case 21: type_str = "VP 18 med elkedel og k첩l"; break;
        case 22: type_str = "VGU 250 brugsvands varmepumpe"; break;
        case 23: type_str = "VGU 250 brugsvands varmepumpe med elkedel"; break;
        case 24: type_str = "VPL 25 uden k첩l"; break;
        case 25: type_str = "VPL 25 med k첩l"; break;
        case 26: type_str = "VPM 120-560"; break;
        case 27: type_str = "Comfort 1200 - 4000"; break;
        case 28: type_str = "VP 20 Compact gorona"; break;
        case 29: type_str = "VLX med CTS 602 print"; break;
        case 30: type_str = "Compact P Nordic"; break;
        case 31: type_str = "Comfort Nordic"; break;
        case 32: type_str = "VP 18 Version 1"; break;
        case 33: type_str = "Combi 300"; break;
        case 34: type_str = "Compact med 4-vejsventil uden k첩l"; break;
        case 35: type_str = "test1"; break;
        case 36: type_str = "test2"; break;
        case 37: type_str = "test3"; break;
        case 38: type_str = "test4"; break;
        case 39: type_str = "test5"; break;
        case 40: type_str = "test6"; break;
        case 41: type_str = "test7"; break;
        case 42: type_str = "test8"; break;
        case 43: type_str = "test9"; break;
        case 44: type_str = "Compact P2 GEO9 Med Jordvarme"; break;
        case 45: type_str = "test11"; break;
        default: type_str = "Unknown"; break;
      }
      return type_str;

switch:
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "On/Off state"
    id: nilan_on_off_state
    register_type: holding
    bitmask: 1
    force_new_range: true
    use_write_multiple: true
    address: 1001
